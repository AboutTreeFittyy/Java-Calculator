/*
 * File name: CalculatorView.java
 * Author: Mathew Boland, 040800005
 * Course: CST8221 - JAP, Lab Section: 302
 * Assignment: 1 part 2
 * Date 03/10/2016
 * Professor: Svillen Ranev
 * Purpose: Creates the gui for the calculator
 * and handles all the events generated by input
 * Class List: CalculatorView, Controller
 */

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.Font;

import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.border.LineBorder;

/** Purpose: To create and layout all the buttons on the calculator JPane
 * @author Mathew Boland
 * @version 1
 * @see java.swing, java.awt
 * @since 1.8_65
 */
@SuppressWarnings("serial")
public class CalculatorView extends JPanel{
	private JTextField display; /**Textfield to display on calculator*/
	private JLabel error; /**indicated if error occured on top right, if no error tells mode*/
	private JButton dotButton; /**reference to the calculators dotbutton*/
	
	/**
	 * Purpose: Creates the gui for the calculator
	 * @param
	 * @return CalculatorView JPanel Object
	 */
	public CalculatorView()
	{
		
		//Set panel properties
		setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
		setBackground(Color.BLACK);
		setLayout(new BorderLayout());
		
		//Set array full of strings to make buttons
		String nums[] = { "7", "8", "9", "\u2215", "4", "5", "6", "\u2217", "1", "2", "3", "\u2212", "\u2213", "0", "\u2219", "+"};
		String command[] = { "7", "8", "9", "/", "4", "5", "6", "*", "1", "2", "3", "-", "~", "0", ".", "+"};
		Color fgcolor[] = { Color.BLACK, Color.BLACK, Color.BLACK, Color.YELLOW, Color.BLACK, Color.BLACK, Color.BLACK, Color.YELLOW, Color.BLACK, Color.BLACK, Color.BLACK, Color.YELLOW, Color.BLACK, Color.BLACK, Color.BLACK, Color.YELLOW};

		
		//Create Panel for the Keypad
		JPanel keypad = new JPanel(new GridLayout( 4, 4, 3, 3));
		keypad.setBorder(BorderFactory.createEmptyBorder(3,0,3,0));
		
		Controller handler = new Controller();
		
		//Loop through array, making buttons for each element
		for(int i = 0; i < nums.length; i++)
		{
			keypad.add(createButton(nums[i], command[i], fgcolor[i], Color.BLUE, handler)); //Symbols are yellow text	
		}
		
		//make equals and clear grid for top
		JPanel clearEquals1 = new JPanel(new GridLayout( 1, 2, 3, 3));
		clearEquals1.add(createButton("C", "C", Color.BLACK, Color.RED, handler), BorderLayout.WEST);
		clearEquals1.add(createButton("=", "=", Color.BLACK, Color.YELLOW, handler), BorderLayout.EAST);
		
		//make equals and clear grid for bottom
		JPanel clearEquals2 = new JPanel(new GridLayout( 1, 2, 3, 3));
		clearEquals2.add(createButton("=", "=", Color.BLACK, Color.YELLOW, handler), BorderLayout.WEST);
		clearEquals2.add(createButton("C", "C", Color.BLACK, Color.RED, handler), BorderLayout.EAST);		
		
		//Make panel for entire keypad
		JPanel keypadFull = new JPanel(new BorderLayout());
		keypadFull.add(keypad, BorderLayout.CENTER);
		keypadFull.add(clearEquals1, BorderLayout.NORTH);
		keypadFull.add(clearEquals2, BorderLayout.SOUTH);		

		//create bar for int and precision point
		//New Jpanel for selection bar
		JPanel radios = new JPanel();
		radios.setBackground(Color.YELLOW);
		
		//remove upper padding
		FlowLayout layout = (FlowLayout)radios.getLayout();
		layout.setVgap(0);
		
		//Create radio buttons
		JRadioButton point = new JRadioButton(".0", false);
		point.setBackground(Color.YELLOW);
		point.setActionCommand(".0");
		point.addActionListener(handler);
		JRadioButton doublePoint = new JRadioButton(".00", true);
		doublePoint.setBackground(Color.YELLOW);
		doublePoint.setActionCommand(".00");
		doublePoint.addActionListener(handler);
		JRadioButton scientific = new JRadioButton("Sci", false);
		scientific.setBackground(Color.YELLOW);
		scientific.setActionCommand("Sci");
		scientific.addActionListener(handler);

		//add radio buttons to jpanel
		radios.add(point);
		radios.add(doublePoint);
		radios.add(scientific);
		
		//create group
		ButtonGroup group = new ButtonGroup();
		group.add(point);
		group.add(doublePoint);
		group.add(scientific);
		
		//Create int checkbox
		JCheckBox integer = new JCheckBox("Int", false);
		integer.setBackground(Color.GREEN);
		integer.setActionCommand("int");
		integer.addActionListener(handler);
				
		//make panel out of operations
		JPanel middleBar = new JPanel();
		FlowLayout midlayout = (FlowLayout)middleBar.getLayout();
		
		//Set gap between int and precision
		midlayout.setHgap(20);
		middleBar.setBackground(Color.BLACK);
		middleBar.setBorder(BorderFactory.createEmptyBorder(4,4,4,4));
		middleBar.add(integer);
		middleBar.add(radios);
		
		//create string bar
		//Make separate panel
		JPanel top = new JPanel();
		
		//Create textfield
		display = new JTextField("0.0", 16);
		display.setHorizontalAlignment(JTextField.RIGHT);
		display.setPreferredSize(new Dimension(50, 30));
		display.setEditable(false);
		
		//set error button up
		error = new JLabel("F");
		error.setHorizontalAlignment(JTextField.CENTER);
		error.setPreferredSize(new Dimension(25, 25));
		error.setOpaque(true);
		error.setBackground(Color.YELLOW);
		
		//make backspace button
		LineBorder border = new LineBorder(Color.RED, 1);
		JButton backSpace = new JButton("\u21D0");
		backSpace.setForeground(Color.RED);
		backSpace.setContentAreaFilled(false);
		backSpace.setBorder(border);
		backSpace.setPreferredSize(new Dimension(25,  25));
		backSpace.setToolTipText("Backspace (Alt-B)");
		backSpace.setMnemonic('B');
		backSpace.setActionCommand("<-");
		backSpace.addActionListener(handler);

		//add the elements to the top jpanel
		top.add(error);
		top.add(display);
		top.add(backSpace);
		
		//Add them all into the main JPanel
		//Add radios into the keypad first
		JPanel bottom = new JPanel(new BorderLayout());
		bottom.add(middleBar, BorderLayout.NORTH);
		bottom.add(keypadFull, BorderLayout.CENTER);
		
		//Now add top bar to north of JPanel and rest to south
		add(top, BorderLayout.NORTH);
		add(bottom);		
	}
	
	/**
	 * Purpose: To create a new button
	 * @param text The text on the button
	 * @param ac The action command for the button
	 * @param fg The foreground button color
	 * @param bg The background button color
	 * @param handler the buttons handler
	 * @return JButton Button created
	 */
	private JButton createButton(String text, String ac, java.awt.Color fg, java.awt.Color bg, ActionListener handler)
	{
		//Create a new button with a specified text label
		JButton newButton = new JButton(text);		
		
		//Set the background and foreground button colors
		newButton.setBackground(bg);
		newButton.setForeground(fg);
		
		//set the action command for the button. if ac parameters 
		//is null the action command property of the button doesnt need to be set
		if(ac != null)
		{
			newButton.setActionCommand(ac);
		}
		
		//set the buttons font size to 21, dont change default font or style
		Font font1 = new Font(text, Font.PLAIN, 21);		
		newButton.setFont(font1);
		
		//register the handler as an action event listener for the button
		newButton.addActionListener(handler);
		
		//check for dot
		if(ac == ".")
		{
			dotButton = newButton;
		}
		
		//return a reference to the created button		
		return newButton;
	}
	
	/** Purpose: To control the actions obtained via the Calculator 
	 * buttons. Also to set the display correctly and handle any errors.
	 * @author Mathew Boland
	 * @version 1
	 * @see java.swing, java.awt
	 * @since 1.8_65
	 */
	private class Controller implements ActionListener{
		private boolean op1Set = false; /**first calculation operand flag*/
		private boolean equalDone = false; /**equals action just performed flag*/
		private boolean calcDone = false; /**calculation longer than 2 numbers flag*/
		private boolean operationSet = false; /**Flag for when operation is set*/
		private boolean added = false; /**flag to tell when an expression just executed and view should be reset on number or dot input*/
		private boolean cleared = true; /**flag for when calculator has been cleared or just starteed*/
		private boolean err = false;  /**error flag*/
		private CalculatorModel calc = new CalculatorModel(); /**Calculator model object*/

		/**
		 * Purpose: To perform the required actions given by the 
		 * ActionEvent
		 * @param action Action command generated by a button
		 * @return 
		 */
		public void actionPerformed(ActionEvent action) 
		{
			//Command taken from action for the event
			String 	command = action.getActionCommand();
			
			
			//check if error occured to ensure buttons only work when there are no errors
			if(!err)
			{
				//finds appropriate action to take based on command
				if(command == "+" || command == "-" || command == "/" || command == "*")
				{
					//finds what action has just happened based on flags to perform correct action and set proper flags
					//first comment in each statement says what just happened
					if(op1Set == false && equalDone == true && calcDone == false && operationSet == false)
					{
						//equals pressed
						
						//set the first operand
						calc.setFirstOperand(display.getText());
						//indicate that the first operand (previous calculations answer) is set
						op1Set = true;
						//indicate that there is now an operation to be used
						operationSet = true;
						//text needs to be reset before adding numbers so set flag
						added = true;
						//now equal was not just done so rest flag
						equalDone = false;
					}
					else if(op1Set == true && equalDone == false && calcDone == false && operationSet == true && added == false)
					{
						//multiple arithmetic expression
						
						//op1 is set so set the second operand to the current text field and calculate then display the answer
						calc.setSecondOperand(display.getText());
						calc.performCalculations();
						display.setText(calc.getAnswer());	
						//set the first operand to the current answer
						calc.setFirstOperand(display.getText());
						//let the program know that the operation has been set
						operationSet = true;
						//indicate a multiple arithmetic expression has taken place
						calcDone = true;
					}
					else if(op1Set == false && equalDone == false && calcDone == false && operationSet == false)
					{
						//setting first operator
						operationSet = true;
						//set op1
						op1Set = true;
						calc.setFirstOperand(display.getText());
						added = true;					
					}
					else if(op1Set == true && equalDone == false && calcDone == false && operationSet == true)
					{
						//more than one operation has been selected for one calcuation (ex. "2*/")
						
						//setting second operator for same expression
						calc.setFirstOperand(display.getText());
					}
					//set the operation always
					calc.setOperation(command);
				}
				else if(command == "~") //+/- operator
				{
					//checks mode so it knows which type to use
					if(calc.getMode() == "int")
					{
						//get the number
						int i = Integer.valueOf(calc.formatNum(display.getText()));
						//change sign by multiplying by -1
						i = i * (-1);
						//set it back to the display
						display.setText(Integer.toString(i));
					}
					else if(calc.getMode() == "float")
					{
						//get the number
						float i = Float.valueOf(calc.formatNum(display.getText()));
						//change sign by multiplying by -1
						i = i * (-1);
						//set it back to the display
						display.setText(Float.toString(i));
					}
				}
				else if(command == "=") //calculate answer
				{
					//set second operand then calculate and set the text
					calc.setSecondOperand(display.getText());
					calc.performCalculations();
					display.setText(calc.getAnswer());
					
					//reset flags to indicate calculation has just occured
					calcDone = false;
					operationSet = false;
					op1Set = false;
					equalDone = true;
					
					//check for possible error
					if(calc.getError())
					{
						//set error flag
						err = true;
						//change what is displayed to indicate an error
						error.setBackground(Color.RED);
						error.setText("E");
						display.setText("--");
					}
				}						
				else if(command == "<-") //backspace
				{
					//rebuilds string in textfield but with one less char at the end
					StringBuilder subDisplay = new StringBuilder();
					for(int i = 0; i < display.getText().length()-1; i++)
					{
						subDisplay.append(display.getText().charAt(i));
					}
					display.setText(subDisplay.toString());
					
					//check if no numbers being displayed
					if (!(display.getText().matches(".*\\d.*")))
					{					
						display.setText(calc.formatNum("0.0"));
					}							
				}
				else if(Character.isDigit(command.charAt(0)) || command == ".")// Number selected
				{
					//action to do based on what event happened previously
					if(cleared == true)
					{
						//cleared or just started
						display.setText("");
						cleared = false;
					}
					else if(equalDone)
					{					
						//equals sign done
						op1Set = false;
						display.setText("");
						equalDone = false;
						calcDone = false;					
					}
					else if(calcDone)
					{
						//in between calculation done
						display.setText("");
						calcDone = false;
						op1Set = true;
					}
					
					//indicates the display needs to be reset so a new number can be written
					if(added == true)
					{
						display.setText("");
						added = false;
					}
					
					//check for a dot
					if(command == ".")
					{
						//check that number does not already have dot
						if(!(display.getText().contains(".")))
						{
							display.setText(display.getText() +command);
						}
					}
					else
					{
						display.setText(display.getText() +command);
					}				
				}
			}//end giant if else
			
			//outside of others in case error occurs this will reset it
			if(command == "C") //clear calculator
			{
				//reset all calculator model values to their initial values
				calc.setFirstOperand("0");
				calc.setSecondOperand("0");
				calc.setOperation("+");
				calc.performCalculations();
				
				//reset display
				display.setText(calc.getAnswer());
				
				//reset all flags to initial values
				op1Set = false;
				equalDone = false;
				calcDone = false;
				operationSet = false;
				added = false;
				cleared = true;
				
				//check for error flag
				if(err)
				{
					//reset error flag					
					err = false;
					//reset Calculator model error flag
					calc.setError(false);
					
					//set display to proper mode 
					if(calc.getMode() == "int")
					{					
						error.setBackground(Color.GREEN);
						error.setText("I");		
						display.setText(calc.formatNum("0.0"));	
					}
					else
					{
						error.setBackground(Color.YELLOW);
						error.setText("F");		
						display.setText(calc.formatNum("0.0"));	
					}
				}
			}
			else if(command == "int") //turn on or off int
			{
				//check what mode is
				if(calc.getMode() == "float")
				{							
					//set the mode
					calc.setMode(command);
					//change button properties
					dotButton.setBackground(Color.GRAY);
					dotButton.setEnabled(false);
					if(!err)
					{
						display.setText(calc.formatNum(display.getText()));	
						error.setBackground(Color.GREEN);
						error.setText("I");
					}										
				}
				else
				{
					//set the mode
					calc.setMode("float");
					//set the properties
					dotButton.setBackground(Color.BLUE);
					dotButton.setEnabled(true);
					if(!err)
					{
						error.setBackground(Color.YELLOW);
						error.setText("F");		
						display.setText(calc.formatNum(display.getText()));
					}								
				}
				
			}
			else if(command == "Sci" || command == ".0" || command == ".00") //floating point precision
			{
				//set the precision
				calc.setFloatPrecision(command);
				//check if currently in error so that it doesnt try to format "--"
				if(calc.getMode() != "int" && !err)
				{
					String newDisplay = calc.formatNum(display.getText());
					display.setText(newDisplay);
				}
				
			}
		}
		
	}
}
